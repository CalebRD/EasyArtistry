The following is a to-do list of various features that we still need to implement for this project.

GUI Mockup
- We want to put our own spin on the GUI of this application. The frontend team will work to make the site look more user-friendly. It's pretty primitive at the moment, and since
the intended users will be artist, we don't need so much information to be displayed on the screen as it is right now.

Advanced Settings Menu
- Similar to what I mentioned directly above, there are a lot of excess features and settings that don't need to be displayed on the main page. This is where we'll add an extra tab so these 
features can still be accessed, but will clean up the website a lot.
Remove Unnecessary Tabs (add to Advanced Settings)
- Some of the tabs that need to be cleaned up include: Textual Inversion, Hypernetworks, Checkpoints, Lora
Checkpoint Merger, and Train. 

Image to Image & Generation Tab Streamlining
- These tabs currently look very intimidating, and ask for input in areas like batch count, batch size, CFG Scale, seed, script, and more. All of these features have very specific uses that
won't necessarily be needed every time. This can be cleaned up by only including inputs for the prompt and output image size, and the rest can be placed into extra tabs and dropdown menus.

Tutorial Tab
- There are countless features that this website contains, and it would be difficult for people to understand what every tab and button do, even experienced artists might want to try something
new but won't know how to do it. That's where the tutorial tab will come in, in order to show all users how to navigate the website's various features.
Create Tutorials
- There also needs to be some content in the tutorial tab, and that is where our group will need to become proficient in most of the app's features in order to create detailed tutorials that
describe how everything works.
Here are some features that require a tutorial:
- Inpainting
- Outpainting
- Text-to-Image generation
- Image-to-Image generation

Add invisible watermark in metadata
- One of the most important features that we want to add to this website involves adding an invisible watermark to all generated images. This will be a big step towards one of our primary 
objectives, fighting plaigiarism. By including an invisible watermark in all of the images generated by the website, it will be easy to determine whether or not an input image was 
AI generated or not. There are a few ways that this could be accomplished. One possible way is to use a typical watermark, but to make it so small and almost transparent such that it would be
very difficult to see with the naked eye without knowing where to look. Another possibility is to modify a few pixels of the input image and change their RGB values to a specific combination 
that only we can recognize.
Here is an example of a website that creates/checks for invisible watermarks:
https://invisiblewatermark.net
And it also includes an in-depth description of how the process works and how we could replicate it:
https://invisiblewatermark.net/how-invisible-watermarks-work

Check for invisible watermark
- When a user gives an input image, we want to check whether or not it contains the invisible watermark mentioned above. This could most easily be accomplished with the second technique 
I mentioned, where we could check specific pixels and see if their RGB values match the specific RGB values that we're looking for. If they do, then the watermark does exist, which means the
input image was generated by our website. If it is not there, it means the input image came from another source.








